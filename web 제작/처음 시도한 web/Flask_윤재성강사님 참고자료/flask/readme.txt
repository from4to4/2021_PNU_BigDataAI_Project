[ 개발 ]
1. 유지보수가 쉬워야한다. = 중복된 코드를 최소화 시키는 것이 중요
2. 구조적으로 처리해야한다. 코드처리는 python 파일, html생성은 html으로

[ BluePrint ]
- 요청할 때 사용하는 함수들을 각 파일로 따로 떼어내는 것 (유지보수 용이하게 하기 위해)

[ 프로젝트 순서 ]
1. 작업할 폴더를 생성
2. Flask 기본 코드를 생성(main.py)
3. BluePrint 기반으로 설정한다. template_folder을 views로 설정
    3-1. 주소 입력해서 나오는 첫 페이지를 구성
    3-2. 첫 페이지를 보고 모든 페이지에 중복되는 부분이 있으면 이를 분리시키기( include폴더 )
    3-3. 상단 메뉴의 링크(href)부분을 먼저 처리해야한다
    3-4. 나머지 링크 부분을 수정해준다.
4. 데이터 베이스 모델링 및 구축
5. 데이터 베이스 접속 부분을 구현
    - pymysql이 없다면 [Anaconda Prompt] -> $ pip install pymysql

[ 요청방식 ]
- GET
- POST
    - from태그의 method가 POST인 경우에만 <form method='POST'>
    - 문자열 뿐만 아니라 파일을 전송할 수 있음. 그리고 숨겨서 전송
- flask는 요청방식을 받아들일 수 있도록 세팅해야함. 하지 않으면 기본적으로 GET방식만 받아온다. 

[ 게시판 ]
- DB에 무엇을 저장할 것인가?
    - 수시로 변하거나 다른 곳에서 사용해야할 데이터는 DB에 저장하기
    - 따라서 웹을 보면서 DB에 저장할 데이터를 선정한다.
    - main
        - 게시판 이름(자유 게시판,...) - 게시판
        - 글번호, 글제목, 작성날짜 - 게시글
    - board_main
        - 작성자 이름 - 게시글
    - board_read
        - 작성 날짜 - 게시글
        - 첨부 이미지 - 게시글
    - user_join
        - 아이디 - 회원 
        - 비밀번호 - 회원
        - 가입 회원의 아이디(중복확인을 위해)
    - user_login
        - 로그인 성공 여부

et.al
- w3schools.com: 웹개발 관련 사이트가 정리되어 있음. 
- form 태그는 태그 아래의 요소들을 다 가져간다고 생각하면 된다.
